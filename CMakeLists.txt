# Do NOT edit this file unless you really know what you are doing
cmake_minimum_required(VERSION 3.16)
cmake_policy(SET CMP0076 NEW)
SET(CMAKE_COLOR_MAKEFILE ON)

function(reportvar var)
  message(STATUS "${ARGVN}${var}=${${var}}")
endfunction()

function(reportallvars)
	get_cmake_property(_variableNames VARIABLES)
	list (SORT _variableNames)
	foreach (_variableName ${_variableNames})
		message(STATUS "${_variableName}=${${_variableName}}")
	endforeach()
endfunction()

# Set project name
project(ga-aem)

reportvar(CMAKE_SYSTEM_NAME)
reportvar(CMAKE_BUILD_TYPE)

set(CMAKE_EXECUTABLE_SUFFIX_C ".exe")
set(CMAKE_EXECUTABLE_SUFFIX_CXX ".exe")

# Set options
option(WITH_MPI "WITH_MPI" ON)
option(WITH_NETCDF "WITH_NETCDF" ON)
option(WITH_GDAL "WITH_GDAL" ON)
option(WITH_PETSC "WITH_PETSC" ON)

reportvar(WITH_MPI)
reportvar(WITH_NETCDF)
reportvar(WITH_GDAL)
reportvar(WITH_PETSC)

# Set the C++ standard to C++17
set(CMAKE_CXX_STANDARD 17)

# Set the compile flags
if("${CMAKE_C_COMPILER_ID}" MATCHES "MSVC" OR "${CMAKE_CXX_COMPILER_ID}" MATCHES "MSVC")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2")
	SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   /O2")
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
else()
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -Wno-unused-but-set-variable -Wno-sign-compare -Wno-format-security -Wno-tautological-constant-compare ")
	SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -O3 -Wno-unused-but-set-variable -Wno-sign-compare -Wno-format-security -Wno-tautological-constant-compare ")
	# Adding filesystem library
	link_libraries(-lstdc++fs)
endif()

if(CMAKE_COMPILER_IS_GNUCC)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-result -Wno-date-time -Wno-error=date-time ")
	SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -Wno-unused-result -Wno-date-time -Wno-error=date-time ")
	#On GCC, even with -Wno-date-time, still get warings of the form: warning: macro "__DATE__" might prevent reproducible builds [-Wdate-time]	
endif()

# Find PkgConfig
find_package(PkgConfig QUIET)
if(PkgConfig_FOUND)
	message(STATUS "PkgConfig package was found")
else()
	message(STATUS "PkgConfig package was NOT found")
endif()


# Add the project include directories
include_directories(src/)
include_directories(submodules/csv-parser/single_include/)
include_directories(submodules/eigen/)

# Configure FFTW
if(PkgConfig_FOUND)
	pkg_search_module(FFTW REQUIRED fftw3 IMPORTED_TARGET)
endif()

if(NOT FFTW_FOUND)
	message(STATUS "FFTW package was not found - manual setup")
	set(FFTW_DIR $ENV{FFTW_DIR})
	find_path(FFTW_INCLUDE_DIRS NAMES "fftw3.h" PATHS ${FFTW_DIR} PATH_SUFFIXES "include" NO_DEFAULT_PATH)
	
	if (MSVC)
		#For Visual studio/MSVC make an import library from the downloaded FFTW dll (something to do with it being built using MinGW)
		#and must add MSVC_FFTW_IMPORTLIB as a dependency (see add_dependencies()) for all targets that require FFTW in MSVC
		set(FFTW_LINK_LIBRARIES ${FFTW_DIR}/libfftw3-3.lib)
		add_custom_command(OUTPUT ${FFTW_DIR}/libfftw3-3.lib						
			COMMAND CMD /C lib.exe /machine:x64 /def:libfftw3-3.def /out:libfftw3-3.lib
			WORKING_DIRECTORY ${FFTW_DIR}
			COMMENT "Creating MSVC FFTW import library"
			VERBATIM)
		add_custom_target(MSVC_FFTW_IMPORTLIB DEPENDS ${FFTW_DIR}/libfftw3-3.lib)
	else()
		find_library(FFTW_LINK_LIBRARIES "fftw3-3" "libfftw3-3" PATHS ${FFTW_DIR} PATH_SUFFIXES "lib" "lib64" NO_DEFAULT_PATH)
	endif()

	set(FFTW_FOUND 1)
endif()

if(FFTW_FOUND)
	reportvar(FFTW_VERSION)
	reportvar(FFTW_INCLUDE_DIRS)
	reportvar(FFTW_LINK_LIBRARIES)
	reportvar(FFTW_LIBDIR)
	reportvar(FFTW_LIBRARIES)
	reportvar(FFTW_LDFLAGS)
endif()

# Configure MPI if opted for
if(${WITH_MPI})
	message(STATUS "\n\nChecking for MPI")
	find_package(MPI)
	if(MPI_FOUND)
		message(STATUS "MPI was found")
	endif()
endif()

# Add OpenMP support (This is NOT the same as MPI)
message(STATUS "\n\nChecking for OpenMP support")
find_package(OpenMP QUIET)
if(OpenMP_CXX_FOUND) 
	message(STATUS "OpenMP was found")
endif()

# Configure GDAL
if(${WITH_GDAL})
	message(STATUS "\n\nChecking for GDAL")
	find_package(GDAL REQUIRED)
	if(GDAL_FOUND)
		message(STATUS "GDAL ${GDAL_VERSION} was found")
		reportvar(GDAL_INCLUDE_DIRS "	")
		reportvar(GDAL_LIBRARIES "	")
	endif()
endif()

# Configure PETSc (only used for galeiallatonce)
if(${WITH_PETSC})
	message(STATUS "\n\nChecking for PETSC")
	set(PETSC_DIR $ENV{PETSC_DIR})
	if(PkgConfig_FOUND)	
		pkg_search_module(PETSC PETSc IMPORTED_TARGET REQUIRED) 
		if(PETSC_FOUND)
			set(USE_PETSC_VIA_PKG_CONFIG TRUE)
			message(STATUS "PETSC was found by pkg_search_module()")
			set(PETSC_EXTRA_LIB_DIR $ENV{PETSC_EXTRA_LIB_DIR})
			reportvar(PETSC_VERSION)	
			reportvar(PETSC_DIR)	
			reportvar(PETSC_INCLUDE_DIRS)	
			reportvar(PETSC_LIB_DIR)	
			reportvar(PETSC_LIBRARIES)
			reportvar(PETSC_LINK_LIBRARIES)
			reportvar(PETSC_LDFLAGS)
			reportvar(PETSC_EXTRA_LIB_DIR)
		endif()
	endif()

	if(NOT PETSC_FOUND)
		message(STATUS "PETSC was NOT found by pkg_search_module() --using environment variables instead")
		SET(PETSC_FOUND 1)
		set(USE_PETSC_VIA_PKG_CONFIG FALSE)
		set(PETSC_DIR $ENV{PETSC_DIR})
		set(PETSC_INCLUDE_DIRS $ENV{PETSC_INCLUDE_DIRS})
		set(PETSC_LIB_DIR $ENV{PETSC_LIB_DIR})
		set(PETSC_LIBRARIES $ENV{PETSC_LIBRARIES})
		set(PETSC_LDFLAGS $ENV{PETSC_LDFLAGS})
		
		foreach (lib_name ${PETSC_LIBRARIES})
			set(full_lib_name ${PETSC_LIB_DIR}/${lib_name})
			cmake_path(SET full_lib_name NORMALIZE "${full_lib_name}")
			list(APPEND PETSC_LINK_LIBRARIES ${full_lib_name})
		endforeach()
		
		reportvar(PETSC_DIR)	
		reportvar(PETSC_INCLUDE_DIRS)	
		reportvar(PETSC_LIB_DIR)	
		reportvar(PETSC_LIBRARIES)
		reportvar(PETSC_LINK_LIBRARIES)
		reportvar(PETSC_LDFLAGS)
	endif()
endif()

# Configure NETCDF if opted for
if(${WITH_NETCDF})
	message(STATUS "\n\nChecking for NETCDF")
	pkg_search_module(NETCDFCXX netcdf-cxx4 IMPORTED_TARGET) 
	if(NETCDFCXX_FOUND)
		message(STATUS "NETCDFCXX package was found")
		set(NETCDFCXX_PACKAGE_FOUND 1)
	else()
		message(STATUS "NETCDFCXX package was not found - building our own")
		set(NETCDF_DIR $ENV{NETCDF_DIR})
		set(NETCDF_INCLUDE_DIR $ENV{NETCDF_INCLUDE_DIR})
		set(NETCDF_LIB_DIR $ENV{NETCDF_LIB_DIR})
		set(NETCDF_LIBRARIES $ENV{NETCDF_LIBRARIES})

		foreach (lib_name ${NETCDF_LIBRARIES})
			set(full_lib_name ${NETCDF_LIB_DIR}/${lib_name})
			cmake_path(SET full_lib_name NORMALIZE "${full_lib_name}")
			list(APPEND NETCDF_LINK_LIBRARIES ${full_lib_name})
		endforeach()

		reportvar(NETCDF_DIR)
		reportvar(NETCDF_INCLUDE_DIR)
		reportvar(NETCDF_LIB_DIR)
		reportvar(NETCDF_LIBRARIES)
		reportvar(NETCDF_LINK_LIBRARIES)

		set(NETCDFCXX_SRC_DIR submodules/netcdf-cxx4/cxx4)
		set(NETCDFCXX_INCLUDE_DIRS ${NETCDFCXX_SRC_DIR} ${NETCDF_INCLUDE_DIR})
		set(NETCDFCXX_PACKAGE_FOUND 0)


		file(GLOB NC_CXX_HEADERS ${NETCDFCXX_SRC_DIR}/*.h)
		file(GLOB NC_CXX_SOURCES ${NETCDFCXX_SRC_DIR}/nc*.cpp)
		add_library(libnetcdfcxx STATIC ${NC_CXX_SOURCES})
		target_include_directories(libnetcdfcxx PUBLIC ${NETCDFCXX_INCLUDE_DIRS})
		target_link_libraries(libnetcdfcxx PUBLIC ${NETCDF_LINK_LIBRARIES}) 
		reportvar(NETCDFCXX_INCLUDE_DIRS)
		reportvar(NETCDFCXX_LIBRARY_DIRS)	
		reportvar(NETCDFCXX_LIBRARIES)
		reportvar(NETCDFCXX_LINK_LIBRARIES)
		reportvar(NETCDFCXX_LD_FLAGS)
	endif()

endif()

### Add the build targets

# Add the TICPP library submodule
add_subdirectory(submodules/ticpp)

# Add the cpp-utils submodule with CGAL turned OFF as it is not needed
SET(WITH_CGAL OFF CACHE BOOL "Build cpp-utils library without CGAL")
add_subdirectory(submodules/cpp-utils)

# Add the gatdaem1d static library
set(target gatdaem1d-static)
add_library(${target} STATIC src/gatdaem1d.cpp)
if (MSVC)
	add_dependencies(${target} MSVC_FFTW_IMPORTLIB)
endif()
set_target_properties(${target} PROPERTIES OUTPUT_NAME gatdaem1d)
target_include_directories(${target} PRIVATE cpp-utils)
target_link_libraries(${target} PRIVATE cpp-utils)
target_include_directories(${target} PRIVATE ${FFTW_INCLUDE_DIRS})
target_link_libraries(${target} PRIVATE ${FFTW_LINK_LIBRARIES})	
install(TARGETS ${target} ARCHIVE DESTINATION lib OPTIONAL)

# Add the gatdaem1d shared library
set(target gatdaem1d-shared)
add_library(${target} SHARED src/gatdaem1d.cpp)
set_target_properties(${target} PROPERTIES OUTPUT_NAME gatdaem1d)
target_include_directories(${target} PRIVATE cpp-utils)
target_link_libraries(${target} PRIVATE cpp-utils)
target_include_directories(${target} PRIVATE ${FFTW_INCLUDE_DIRS})
target_link_libraries(${target} PRIVATE ${FFTW_LINK_LIBRARIES})	
# Install the shared library
install(TARGETS ${target} RUNTIME DESTINATION bin OPTIONAL)
# Install the include files
install(FILES src/gatdaem1d.h TYPE INCLUDE)


# Add gaforwardmodeltdem executable
set(target gaforwardmodeltdem)
add_executable(${target} src/gaforwardmodeltdem.cpp)
if (MSVC)
	add_dependencies(${target} MSVC_FFTW_IMPORTLIB)
endif()
target_include_directories(${target} PRIVATE cpp-utils)
target_link_libraries(${target} PRIVATE cpp-utils)
target_include_directories(${target} PRIVATE ${FFTW_INCLUDE_DIRS})
target_link_libraries(${target} PRIVATE ${FFTW_LINK_LIBRARIES})	
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add example_forward_model executable
set(target example_forward_model)
add_executable(${target} src/example_forward_model.cpp)
if (MSVC)
	add_dependencies(${target} MSVC_FFTW_IMPORTLIB)
endif()
target_include_directories(${target} PRIVATE cpp-utils)
target_link_libraries(${target} PRIVATE cpp-utils)
target_include_directories(${target} PRIVATE ${FFTW_INCLUDE_DIRS})
target_link_libraries(${target} PRIVATE ${FFTW_LINK_LIBRARIES})	
install(TARGETS ${target} DESTINATION bin OPTIONAL)


# Add the pure C example executable
set(target example_forward_model_c)
add_executable(${target} src/example_forward_model_c.c)
if (MSVC)
	add_dependencies(${target} MSVC_FFTW_IMPORTLIB)
endif()
target_include_directories(${target} PRIVATE ${FFTW_INCLUDE_DIRS})
target_link_libraries(${target} PRIVATE gatdaem1d-static)
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add galeisbstdem executable
set(target galeisbstdem)
add_executable(${target} src/galeisbstdem.cpp)
if (MSVC)
	add_dependencies(${target} MSVC_FFTW_IMPORTLIB)
endif()
target_include_directories(${target} PRIVATE cpp-utils)
target_link_libraries(${target} PRIVATE cpp-utils)
target_include_directories(${target} PRIVATE ${FFTW_INCLUDE_DIRS})
target_link_libraries(${target} PRIVATE ${FFTW_LINK_LIBRARIES})
if(${WITH_MPI})
	target_compile_definitions(${target} PRIVATE -D_MPI_ENABLED -DOMPI_SKIP_MPICXX)
	target_include_directories(${target} PRIVATE SYSTEM ${MPI_INCLUDE_PATH})
	target_link_libraries(${target} PRIVATE ${MPI_C_LIBRARIES})
endif()
if(${WITH_NETCDF})
	target_compile_definitions(${target} PRIVATE -DHAVE_NETCDF)
	target_include_directories(${target} PRIVATE submodules/geophysics-netcdf/src/)
	target_include_directories(${target} PRIVATE submodules/geophysics-netcdf/submodules/marray/include/andres/)	
	target_include_directories(${target} PRIVATE ${NETCDFCXX_INCLUDE_DIRS})

	target_link_libraries(${target} PRIVATE ${NETCDFCXX_LINK_LIBRARIES})
	if(NOT ${NETCDFCXX_PACKAGE_FOUND})
		target_link_libraries(${target} PRIVATE libnetcdfcxx)
	endif()
endif()
if(OpenMP_CXX_FOUND) 
	target_link_libraries(${target} PRIVATE OpenMP::OpenMP_CXX)	
endif()
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add galeisbstdem-nompi executable
# This is simply an executable without any MPI functionality or dependency designed for use by people who are not allowed to have MPI installed on their systems
set(target galeisbstdem-nompi)
add_executable(${target} src/galeisbstdem.cpp)
if (MSVC)
	add_dependencies(${target} MSVC_FFTW_IMPORTLIB)
endif()
target_include_directories(${target} PRIVATE cpp-utils)
target_link_libraries(${target} PRIVATE cpp-utils)
target_include_directories(${target} PRIVATE ${FFTW_INCLUDE_DIRS})
target_link_libraries(${target} PRIVATE ${FFTW_LINK_LIBRARIES})
if(${WITH_NETCDF})
	target_compile_definitions(${target} PRIVATE -DHAVE_NETCDF)
	target_include_directories(${target} PRIVATE submodules/geophysics-netcdf/src/)
	target_include_directories(${target} PRIVATE submodules/geophysics-netcdf/submodules/marray/include/andres/)	
	target_include_directories(${target} PRIVATE ${NETCDFCXX_INCLUDE_DIRS})

	target_link_libraries(${target} PRIVATE ${NETCDFCXX_LINK_LIBRARIES})
	if(NOT ${NETCDFCXX_PACKAGE_FOUND})
		target_link_libraries(${target} PRIVATE libnetcdfcxx)
	endif()
endif()
if(OpenMP_CXX_FOUND)
	target_link_libraries(${target} PRIVATE OpenMP::OpenMP_CXX)	
endif()
install(TARGETS ${target} DESTINATION bin OPTIONAL)


# Add garjmcmctdem executable
set(target garjmcmctdem)
if(${WITH_NETCDF})
	add_executable(${target} src/garjmcmctdem.cpp)
	if (MSVC)
		add_dependencies(${target} MSVC_FFTW_IMPORTLIB)
	endif()
	target_include_directories(${target} PRIVATE cpp-utils)
	target_link_libraries(${target} PRIVATE cpp-utils)
	target_include_directories(${target} PRIVATE ${FFTW_INCLUDE_DIRS})
	target_link_libraries(${target} PRIVATE ${FFTW_LINK_LIBRARIES})	
	target_compile_definitions(${target} PRIVATE -DHAVE_NETCDF)
	target_include_directories(${target} PRIVATE ${NETCDFCXX_INCLUDE_DIRS})
	target_link_libraries(${target} PRIVATE ${NETCDFCXX_LINK_LIBRARIES})
	if(NOT ${NETCDFCXX_PACKAGE_FOUND})
		target_link_libraries(${target} PRIVATE libnetcdfcxx)
	endif()

	if(${WITH_MPI})
		target_compile_definitions(${target} PRIVATE -D_MPI_ENABLED -DOMPI_SKIP_MPICXX)
		target_include_directories(${target} PRIVATE SYSTEM ${MPI_INCLUDE_PATH})
		target_link_libraries(${target} PRIVATE ${MPI_C_LIBRARIES})
	endif()
	install(TARGETS ${target} DESTINATION bin OPTIONAL)
else()
	message(WARNING "${target} requires NETCDF - will not be built")
endif()

# Add galeiallatonce executable
set(target galeiallatonce)
if(MPI_FOUND AND PETSC_FOUND) 
	add_executable(${target} src/galeiallatonce.cpp)
	if (MSVC)
		add_dependencies(${target} MSVC_FFTW_IMPORTLIB)
	endif()
	target_include_directories(${target} PRIVATE cpp-utils)
	target_link_libraries(${target} PRIVATE cpp-utils)
	target_include_directories(${target} PRIVATE ${FFTW_INCLUDE_DIRS})
	target_link_libraries(${target} PRIVATE ${FFTW_LINK_LIBRARIES})	
	target_compile_definitions(${target} PRIVATE -D_MPI_ENABLED -DOMPI_SKIP_MPICXX)
	target_include_directories(${target} PRIVATE SYSTEM ${MPI_INCLUDE_PATH})
	target_link_libraries(${target} PRIVATE ${MPI_C_LIBRARIES})

	if(USE_PETSC_VIA_PKG_CONFIG)
		target_link_libraries(${target} PRIVATE PkgConfig::PETSC)
		target_link_directories(${target} PRIVATE ${PETSC_EXTRA_LIB_DIR})
	else()
		target_include_directories(${target} PRIVATE ${PETSC_INCLUDE_DIRS})
		target_link_libraries(${target} PRIVATE ${PETSC_LINK_LIBRARIES})	
		target_link_directories(${target} PRIVATE ${PETSC_LIB_DIR})
		target_link_libraries(${target} PRIVATE ${PETSC_LIBRARIES})
		target_link_options(${target} PRIVATE ${PETSC_LDFLAGS})
	endif()

	install(TARGETS ${target} DESTINATION bin OPTIONAL)
else()
	message(WARNING "${target} requires PETSc and MPI -- will not be built")
endif()

# Add galeisbsfdem executable
set(target galeisbsfdem)
add_executable(${target} src/galeisbsfdem.cpp)
target_include_directories(${target} PRIVATE cpp-utils)
target_link_libraries(${target} PRIVATE cpp-utils)
if(${WITH_MPI})
		target_compile_definitions(${target} PRIVATE -D_MPI_ENABLED -DOMPI_SKIP_MPICXX)
		target_include_directories(${target} PRIVATE SYSTEM ${MPI_INCLUDE_PATH})
		target_link_libraries(${target} PRIVATE ${MPI_C_LIBRARIES})
endif()
if(OpenMP_CXX_FOUND) 
	target_link_libraries(${target} PRIVATE OpenMP::OpenMP_CXX)	
endif()
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add ctlinedata2sgrid executable
set(target ctlinedata2sgrid)
add_executable(${target} src/ctlinedata2sgrid.cpp)
target_include_directories(${target} PRIVATE cpp-utils)
target_link_libraries(${target} PRIVATE cpp-utils)
target_include_directories(${target} PRIVATE ticpp::ticpp)
target_link_libraries(${target} PRIVATE ticpp::ticpp)
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add ctlinedata2slicegrids executable
set(target ctlinedata2slicegrids)
if(${WITH_GDAL} AND GDAL_FOUND)
	add_executable(${target} src/ctlinedata2slicegrids.cpp)
	target_include_directories(${target} PRIVATE cpp-utils)
	target_link_libraries(${target} PRIVATE cpp-utils)
	target_compile_definitions(${target} PRIVATE -DHAVE_GDAL)
	target_include_directories(${target} PRIVATE ${GDAL_INCLUDE_DIRS})
	target_link_libraries(${target} PRIVATE ${GDAL_LIBRARIES})
	install(TARGETS ${target} DESTINATION bin OPTIONAL)
else()
	message(WARNING "${target} requires GDAL - will not be built")
endif()

# Add ctlinedata2georefimage executable
set(target ctlinedata2georefimage)
if (MSVC)
	# Only on Windows with MSVC
	add_executable(${target} src/ctlinedata2georefimage.cpp)
	target_include_directories(${target} PRIVATE cpp-utils)
	target_link_libraries(${target} PRIVATE cpp-utils)
	install(TARGETS ${target} DESTINATION bin OPTIONAL)
endif()

# Add ctlinedata2curtainimage executable
set(target ctlinedata2curtainimage)
if (MSVC)
	# Only on Windows with MSVC
	if(${WITH_GDAL} AND GDAL_FOUND) 
		add_executable(${target} src/ctlinedata2curtainimage.cpp)
		target_include_directories(${target} PRIVATE cpp-utils)
		target_link_libraries(${target} PRIVATE cpp-utils)
		target_compile_definitions(${target} PRIVATE -DHAVE_GDAL)	
		target_include_directories(${target} PRIVATE ${GDAL_INCLUDE_DIRS})
		target_link_libraries(${target} PRIVATE ${GDAL_LIBRARIES})
		target_include_directories(${target} PRIVATE ticpp::ticpp)
		target_link_libraries(${target} PRIVATE ticpp::ticpp)
		install(TARGETS ${target} DESTINATION bin OPTIONAL)	
	else()
		message(WARNING "${target} requires GDAL - will not be built")
	endif()
endif()

# Add removelog10conductivityfromsgrid executable
set(target removelog10conductivityfromsgrid)
add_executable(${target} src/removelog10conductivityfromsgrid.cpp)
target_include_directories(${target} PRIVATE cpp-utils)
target_link_libraries(${target} PRIVATE cpp-utils)
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Install the documentation
install(DIRECTORY docs/ DESTINATION docs MESSAGE_NEVER)

# Install the examples 
install(DIRECTORY examples/ DESTINATION examples
		MESSAGE_NEVER
		PATTERN "*.sh" PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ)

# Install the python library and examples and code, excluding rubbish from the development environment
install(DIRECTORY python/ DESTINATION python
		MESSAGE_NEVER
		PATTERN "*.ilk" EXCLUDE
		PATTERN "*.pdb" EXCLUDE
		PATTERN "*.ipdb" EXCLUDE
		PATTERN "*.iobj" EXCLUDE
		PATTERN "gatdaem1d_debug.dll" EXCLUDE
		PATTERN "*.sh" PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ)

# Install the matlab library and examples and functions, excluding rubbish from the development environment
install(DIRECTORY matlab/ DESTINATION matlab
		MESSAGE_NEVER
		PATTERN "bin" EXCLUDE)

# Install any Unix shell scripts or Windows batch files
if(UNIX)
	install(DIRECTORY scripts/ DESTINATION scripts
			MESSAGE_NEVER
			PATTERN "*.sh" PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ)
else()
	install(DIRECTORY scripts/ DESTINATION scripts
			MESSAGE_NEVER
			PATTERN "*.bat" PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ)		
endif()

# Copy shared library to Matlab and Python directories
# On Windows rename Matlab .dll file to .mexw64
# On Linux rename libgatdaem1d.so to gatdaem1d.so
install (SCRIPT "${CMAKE_SOURCE_DIR}/PostInstall.cmake")

