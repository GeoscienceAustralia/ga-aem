## Do NOT edit this file unless you really know what you are doing
cmake_minimum_required(VERSION 3.16)
cmake_policy(SET CMP0076 NEW)
set(CMAKE_COLOR_DIAGNOSTICS ON)
set(CMAKE_COLOR_MAKEFILE ON)

## Set project name
project(ga-aem VERSION 2.0 DESCRIPTION "Airborne electromagnetics forward modelling and inversion" LANGUAGES CXX C)
message(STATUS "Configuring ga-aem")

include(cmake/Message-Functions.cmake)
include(cmake/Check-Functions.cmake)

reportvar(CMAKE_VERSION)
reportvar(CMAKE_SYSTEM_NAME)
reportvar(CMAKE_BUILD_TYPE)

set(CMAKE_EXECUTABLE_SUFFIX_C ".exe")
set(CMAKE_EXECUTABLE_SUFFIX_CXX ".exe")

# Set options
option(WITH_MPI "WITH_MPI" ON)
option(WITH_NETCDF "WITH_NETCDF" ON)
option(WITH_GDAL "WITH_GDAL" ON)
option(WITH_PETSC "WITH_PETSC" ON)

reportvar(WITH_MPI)
reportvar(WITH_NETCDF)
reportvar(WITH_GDAL)
reportvar(WITH_PETSC)

# Set the C++ standard to C++17
set(CMAKE_CXX_STANDARD 17)

# Set the compile/link flags
if(MSVC)
	add_compile_options(/O2)
	add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
	add_compile_definitions(_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
else()
	add_compile_options(-O3 -Wno-unused-but-set-variable -Wno-sign-compare -Wno-format-security -Wno-tautological-constant-compare)
	link_libraries(-lstdc++fs)
endif()

if(CMAKE_COMPILER_IS_GNUCC)
	add_compile_options(-Wno-unused-result -Wno-date-time -Wno-error=date-time)
	#On GCC, even with -Wno-date-time, still get warings of the form: warning: macro "__DATE__" might prevent reproducible builds [-Wdate-time]
endif()

# Find PkgConfig
message(STATUS "\nChecking for PkgConfig")
find_package(PkgConfig QUIET)
if(PkgConfig_FOUND)
	message(STATUS "PkgConfig was found")
else()
	message(STATUS "PkgConfig was NOT found")
endif()

# Configure FFTW
include(cmake/Configure-FFTW.cmake)

# Configure MPI if opted for
if(${WITH_MPI})
	message(STATUS "\nChecking for MPI")
	find_package(MPI)
	if(MPI_FOUND)
		message(STATUS "MPI was found")
		reportvar(MPI_INCLUDE_PATH)
		reportvar(MPI_LIBRARIES)
	endif()
endif()

# Configure OpenMP support (This is NOT the same as MPI)
message(STATUS "\nChecking for OpenMP support")
find_package(OpenMP QUIET)
if(OpenMP_CXX_FOUND)
	message(STATUS "OpenMP was found")
endif()

# Configure GDAL
if(${WITH_GDAL})
	message(STATUS "\nChecking for GDAL")
	find_package(GDAL REQUIRED)
	if(GDAL_FOUND)
		message(STATUS "GDAL ${GDAL_VERSION} was found")
		reportvar(GDAL_INCLUDE_DIRS)
		reportvar(GDAL_LIBRARIES)
	endif()
endif()

# Configure PETSc (only used for galeiallatonce)
if(${WITH_PETSC})
	set(PETSC_FOUND FALSE)
	include(cmake/Configure-PETSc.cmake)
	if(NOT PETSC_FOUND)
		message(WARNING "PETSc was NOT found")
	endif()
endif()

# Configure NetCDF C++ Libraries
if(${WITH_NETCDF})
	include(cmake/Configure-NetCDF_CXX.cmake)
endif()

#######################################
### Add the build targets

# Add the project include directories, which don't have their own CMakelists.txt
include_directories(src/)
include_directories(submodules/eigen)
include_directories(submodules/csv-parser/single_include)

# Add the TICPP library submodule
add_subdirectory(submodules/ticpp EXCLUDE_FROM_ALL)

# Add the cpp-utils submodule with CGAL turned OFF as it is not needed
set(WITH_CGAL OFF CACHE BOOL "Build cpp-utils library without CGAL" FORCE)
add_subdirectory(submodules/cpp-utils EXCLUDE_FROM_ALL)

# Add the gatdaem1d static library
set(target gatdaem1d-static)
add_library(${target} STATIC src/gatdaem1d.cpp)
set_target_properties(${target} PROPERTIES OUTPUT_NAME gatdaem1d)
target_include_directories(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE FFTW::FFTW)
install(TARGETS ${target} ARCHIVE DESTINATION lib OPTIONAL)

# Add the gatdaem1d shared library
set(target gatdaem1d-shared)
add_library(${target} SHARED src/gatdaem1d.cpp)
set_target_properties(${target} PROPERTIES OUTPUT_NAME gatdaem1d)
target_include_directories(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE FFTW::FFTW)
# Install the shared library
install(TARGETS ${target} RUNTIME DESTINATION bin OPTIONAL)
# Install the include files
install(FILES src/gatdaem1d.h TYPE INCLUDE)


# Add gaforwardmodeltdem executable
set(target gaforwardmodeltdem)
add_executable(${target} src/gaforwardmodeltdem.cpp)
target_include_directories(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE FFTW::FFTW)
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add example_forward_model executable
set(target example_forward_model)
add_executable(${target} src/example_forward_model.cpp)
target_include_directories(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE FFTW::FFTW)
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add the pure C example executable
set(target example_forward_model_c)
add_executable(${target} src/example_forward_model_c.c)
target_link_libraries(${target} PRIVATE gatdaem1d-static)
target_link_libraries(${target} PRIVATE cpp-utils::static)
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add galeisbstdem executable
set(target galeisbstdem)
add_executable(${target} src/galeisbstdem.cpp)
target_include_directories(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE FFTW::FFTW)
if(${WITH_MPI})
	target_compile_definitions(${target} PRIVATE -D_MPI_ENABLED -DOMPI_SKIP_MPICXX)
	target_link_libraries(${target} PRIVATE MPI::MPI_C)
endif()
if(${WITH_NETCDF})
	target_compile_definitions(${target} PRIVATE -DHAVE_NETCDF)
	target_include_directories(${target} PRIVATE submodules/geophysics-netcdf/src/)
	target_include_directories(${target} PRIVATE submodules/geophysics-netcdf/submodules/marray/include/andres/)
	target_link_libraries(${target} PRIVATE NETCDF::CXX)
endif()
if(OpenMP_CXX_FOUND)
	target_link_libraries(${target} PRIVATE OpenMP::OpenMP_CXX)
endif()
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add galeisbstdem-nompi executable
# This is simply an executable without any MPI functionality or dependency designed for use by people who are not allowed to have MPI installed on their systems
set(target galeisbstdem-nompi)
add_executable(${target} src/galeisbstdem.cpp)
target_include_directories(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE FFTW::FFTW)
if(${WITH_NETCDF})
	target_compile_definitions(${target} PRIVATE -DHAVE_NETCDF)
	target_include_directories(${target} PRIVATE submodules/geophysics-netcdf/src/)
	target_include_directories(${target} PRIVATE submodules/geophysics-netcdf/submodules/marray/include/andres/)
	target_link_libraries(${target} PRIVATE NETCDF::CXX)
endif()
if(OpenMP_CXX_FOUND)
	target_link_libraries(${target} PRIVATE OpenMP::OpenMP_CXX)
endif()
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add garjmcmctdem executable
set(target garjmcmctdem)
if(${WITH_NETCDF})
	add_executable(${target} src/garjmcmctdem.cpp)
	target_include_directories(${target} PRIVATE cpp-utils::static)
	target_link_libraries(${target} PRIVATE cpp-utils::static)
	target_link_libraries(${target} PRIVATE FFTW::FFTW)
	target_compile_definitions(${target} PRIVATE -DHAVE_NETCDF)
	target_include_directories(${target} PRIVATE submodules/geophysics-netcdf/src/)
	target_include_directories(${target} PRIVATE submodules/geophysics-netcdf/submodules/marray/include/andres/)
	target_link_libraries(${target} PRIVATE NETCDF::CXX)
	if(${WITH_MPI})
		target_compile_definitions(${target} PRIVATE -D_MPI_ENABLED -DOMPI_SKIP_MPICXX)
		target_link_libraries(${target} PRIVATE MPI::MPI_C)
	endif()
	install(TARGETS ${target} DESTINATION bin OPTIONAL)
else()
	message(WARNING "${target} requires NETCDF - will not be built")
endif()

# Add galeiallatonce executable
set(target galeiallatonce)
if(MPI_FOUND AND PETSC_FOUND)
	add_executable(${target} src/galeiallatonce.cpp)
	target_include_directories(${target} PRIVATE cpp-utils::static)
	target_link_libraries(${target} PRIVATE cpp-utils::static)
	target_link_libraries(${target} PRIVATE FFTW::FFTW)
	target_compile_definitions(${target} PRIVATE -D_MPI_ENABLED -DOMPI_SKIP_MPICXX)
	target_link_libraries(${target} PRIVATE MPI::MPI_C)
	target_link_libraries(${target} PRIVATE PETSC::PETSC)
	install(TARGETS ${target} DESTINATION bin OPTIONAL)
else()
	message(WARNING "${target} requires PETSc and MPI -- will not be built")
endif()

# Add galeisbsfdem executable
### This frequency-domain inversion code is currently out of action
### set(target galeisbsfdem)
### add_executable(${target} src/galeisbsfdem.cpp)
### target_include_directories(${target} PRIVATE cpp-utils::static)
### target_link_libraries(${target} PRIVATE cpp-utils::static)
### if(${WITH_MPI})
### 		target_compile_definitions(${target} PRIVATE -D_MPI_ENABLED -DOMPI_SKIP_MPICXX)
### 		target_link_libraries(${target} PRIVATE MPI::MPI_C)
### endif()
### if(OpenMP_CXX_FOUND)
### 	target_link_libraries(${target} PRIVATE OpenMP::OpenMP_CXX)
### endif()
### install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add ctlinedata2sgrid executable
set(target ctlinedata2sgrid)
add_executable(${target} src/ctlinedata2sgrid.cpp)
target_include_directories(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE cpp-utils::static)
target_include_directories(${target} PRIVATE ticpp::ticpp)
target_link_libraries(${target} PRIVATE ticpp::ticpp)
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Add ctlinedata2slicegrids executable
set(target ctlinedata2slicegrids)
if(${WITH_GDAL} AND GDAL_FOUND)
	add_executable(${target} src/ctlinedata2slicegrids.cpp)
	target_include_directories(${target} PRIVATE cpp-utils::static)
	target_link_libraries(${target} PRIVATE cpp-utils::static)
	target_compile_definitions(${target} PRIVATE -DHAVE_GDAL)
	#target_include_directories(${target} PRIVATE ${GDAL_INCLUDE_DIRS})
	#target_link_libraries(${target} PRIVATE ${GDAL_LIBRARIES})
	target_link_libraries(${target} PRIVATE GDAL::GDAL)
	install(TARGETS ${target} DESTINATION bin OPTIONAL)
else()
	message(WARNING "${target} requires GDAL - will not be built")
endif()

# Add ctlinedata2georefimage executable
set(target ctlinedata2georefimage)
if (MSVC)
	# Only on Windows with MSVC
	add_executable(${target} src/ctlinedata2georefimage.cpp)
	target_include_directories(${target} PRIVATE cpp-utils::static)
	target_link_libraries(${target} PRIVATE cpp-utils::static)
	install(TARGETS ${target} DESTINATION bin OPTIONAL)
endif()

# Add ctlinedata2curtainimage executable
set(target ctlinedata2curtainimage)
if (MSVC)
	# Only on Windows with MSVC
	if(${WITH_GDAL} AND GDAL_FOUND)
		add_executable(${target} src/ctlinedata2curtainimage.cpp)
		target_include_directories(${target} PRIVATE cpp-utils::static)
		target_link_libraries(${target} PRIVATE cpp-utils::static)
		target_compile_definitions(${target} PRIVATE -DHAVE_GDAL)
		target_include_directories(${target} PRIVATE ${GDAL_INCLUDE_DIRS})
		target_link_libraries(${target} PRIVATE ${GDAL_LIBRARIES})
		target_include_directories(${target} PRIVATE ticpp::ticpp)
		target_link_libraries(${target} PRIVATE ticpp::ticpp)
		install(TARGETS ${target} DESTINATION bin OPTIONAL)
	else()
		message(WARNING "${target} requires GDAL - will not be built")
	endif()
endif()

# Add removelog10conductivityfromsgrid executable
set(target removelog10conductivityfromsgrid)
add_executable(${target} src/removelog10conductivityfromsgrid.cpp)
target_include_directories(${target} PRIVATE cpp-utils::static)
target_link_libraries(${target} PRIVATE cpp-utils::static)
install(TARGETS ${target} DESTINATION bin OPTIONAL)

# Install the documentation
install(DIRECTORY docs/ DESTINATION docs MESSAGE_NEVER)

# Install the examples
install(DIRECTORY examples/ DESTINATION examples
		MESSAGE_NEVER
		PATTERN "*.sh" PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ)

# Install the python library and examples and code, excluding rubbish from the development environment
install(DIRECTORY python/ DESTINATION python
		MESSAGE_NEVER
		PATTERN "*.ilk" EXCLUDE
		PATTERN "*.pdb" EXCLUDE
		PATTERN "*.ipdb" EXCLUDE
		PATTERN "*.iobj" EXCLUDE
		PATTERN "*.dll" EXCLUDE
		PATTERN "__pycache__" EXCLUDE
		PATTERN "*.sh" PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ)

# Install the matlab library and examples and functions, excluding rubbish from the development environment
install(DIRECTORY matlab/ DESTINATION matlab
		MESSAGE_NEVER
		PATTERN "bin" EXCLUDE)

# Install any Unix shell scripts or Windows batch files
if(UNIX)
	install(DIRECTORY scripts/ DESTINATION scripts
			MESSAGE_NEVER
			PATTERN "*.sh" PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ)
else()
	install(DIRECTORY scripts/ DESTINATION scripts
			MESSAGE_NEVER
			PATTERN "*.bat" PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ)
endif()

# Copy shared library to Matlab and Python directories
# On Windows rename Matlab .dll file to .mexw64
# On Linux rename libgatdaem1d.so to gatdaem1d.so
install (SCRIPT "${CMAKE_SOURCE_DIR}/cmake/Post-Install.cmake")

